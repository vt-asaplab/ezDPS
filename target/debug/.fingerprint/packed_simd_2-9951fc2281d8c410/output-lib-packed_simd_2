{"message":"feature has been removed","code":{"code":"E0557","explanation":"A feature attribute named a feature that has been removed.\n\nErroneous code example:\n\n```compile_fail,E0557\n#![feature(managed_boxes)] // error: feature has been removed\n```\n\nDelete the offending feature attribute.\n"},"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/lib.rs","byte_start":8447,"byte_end":8461,"line_start":215,"line_end":215,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    const_generics,","highlight_start":5,"highlight_end":19}],"label":"feature has been removed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0557]\u001b[0m\u001b[0m\u001b[1m: feature has been removed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/lib.rs:215:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    const_generics,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfeature has been removed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`\u001b[0m\n\n"}
{"message":"`[u32; 2]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":760,"byte_end":768,"line_start":20,"line_end":20,"column_start":44,"column_end":52,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector2<const IDX: [u32; 2], T, U>(x: T, y: T) -> U","highlight_start":44,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 2]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:20:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector2<const IDX: [u32; 2], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"`[u32; 4]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":1003,"byte_end":1011,"line_start":30,"line_end":30,"column_start":44,"column_end":52,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector4<const IDX: [u32; 4], T, U>(x: T, y: T) -> U","highlight_start":44,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 4]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:30:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector4<const IDX: [u32; 4], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"`[u32; 8]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":1246,"byte_end":1254,"line_start":40,"line_end":40,"column_start":44,"column_end":52,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector8<const IDX: [u32; 8], T, U>(x: T, y: T) -> U","highlight_start":44,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 8]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:40:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector8<const IDX: [u32; 8], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"`[u32; 16]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":1490,"byte_end":1499,"line_start":50,"line_end":50,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector16<const IDX: [u32; 16], T, U>(x: T, y: T) -> U","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 16]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:50:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector16<const IDX: [u32; 16], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"`[u32; 32]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":1737,"byte_end":1746,"line_start":60,"line_end":60,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector32<const IDX: [u32; 32], T, U>(x: T, y: T) -> U","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 32]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:60:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector32<const IDX: [u32; 32], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"`[u32; 64]` is forbidden as the type of a const generic parameter","code":null,"level":"error","spans":[{"file_name":"/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs","byte_start":1984,"byte_end":1993,"line_start":70,"line_end":70,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"pub unsafe fn __shuffle_vector64<const IDX: [u32; 64], T, U>(x: T, y: T) -> U","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the only supported types are integers, `bool` and `char`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"more complex types are supported with `#![feature(adt_const_params)]`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `[u32; 64]` is forbidden as the type of a const generic parameter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/haodiwang/.cargo/registry/src/mirrors.ustc.edu.cn-61ef6e0cd06fb9b8/packed_simd_2-0.3.5/src/codegen/llvm.rs:70:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub unsafe fn __shuffle_vector64<const IDX: [u32; 64], T, U>(x: T, y: T) -> U\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the only supported types are integers, `bool` and `char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: more complex types are supported with `#![feature(adt_const_params)]`\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0557`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0557`.\u001b[0m\n"}
